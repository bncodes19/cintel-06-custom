[{"name": "app.py", "content": "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui, render\nfrom shiny import reactive\nfrom shinywidgets import render_widget, render_plotly\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#   Load penguins dataset into a dataframe\npenguins_df = load_penguins()\n\n#   Interactive Dashboard Title\nui.page_opts(title=\"Penguins Dashboard\", fillable=True)\n\n#   Interactive Sidebar Options\nwith ui.sidebar(position=\"right\", bg=\"#f8f8f8\", open=\"open\"):\n    ui.h2(\"Interactive Options\")\n    ui.input_selectize(\"select_attribute\",\"Select attribute\",\n                       choices=[\"bill_length_mm\",\"bill_depth_mm\",\"flipper_length_mm\", \"body_mass_g\"],\n                       selected=[\"bill_length_mm\"])\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly bin numeric\",20,min=1,max=100)    \n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn bin count\", 10, 100, 20,step=5, animate=True)\n    ui.input_checkbox_group(\"selected_species_list\",\"Select a species\",\n                            choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"], inline=True)\n    ui.input_checkbox_group(\"selected_island_list\",\"Select an island\",\n                            choices=[\"Torgersen\", \"Biscoe\", \"Dream\"],selected=[\"Torgersen\", \"Biscoe\", \"Dream\"], inline=True)\n    ui.input_select(  \n    \"selected_sex_list\",\"Select Sex (M/F)\",{\"male\": \"Male\", \"female\": \"Female\"},selected=[\"male\",\"female\"],multiple=True)\n    ui.hr()\n    ui.h5(\"GitHub Code Repository\")\n    ui.a(\"cintel-03-reactive\", href=\"https://github.com/bncodes19/cintel-03-reactive/blob/main/app.py\", target=\"_blank\")\n\n#   a Plotly Histogram (showing all species)\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram\")\n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(\n                filtered_data(),\n                x=input.select_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\")\n\nwith ui.layout_columns():\n#   a DataTable (showing all data)\n    with ui.card():\n        ui.card_header(\"Data Table\")\n        @render.data_frame\n        def data_table():\n            return render.DataTable(filtered_data()) \n#   a Data Grid (showing all data)\n    with ui.card():\n        ui.card_header(\"Data Grid\")\n        @render.data_frame\n        def data_grid():\n            return render.DataGrid(filtered_data())\n\n#    a Plotly Scatterplot (showing all species)\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"All Species (Plotly Scatterplot)\")\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                data_frame=filtered_data(), x=\"body_mass_g\", y=\"bill_depth_mm\",\n                color=\"species\",\n                labels={\"bill_depth_mm\": \"Bill Depth (grams)\",\n                    \"body_mass_g\": \"Body Mass (millimeters)\"},)\n\n#    a Seaborn Histogram (showing all species)\n    with ui.card():\n        ui.card_header(\"All Species (Seaborn Histogram)\")\n        @render.plot\n        def seaborn_histogram():\n            hist = sns.histplot(data=filtered_data(), x=\"body_mass_g\", bins=input.seaborn_bin_count())  \n            hist.set_xlabel(\"Mass (grams)\")\n            hist.set_ylabel(\"Count\")\n            return hist\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n    \n    @reactive.calc\n    def filtered_data():\n        species_input = input.selected_species_list()\n        island_input = input.selected_island_list()\n        sex_input = input.selected_sex_list()\n        filtered_data = penguins_df[ (penguins_df['species'].isin(species_input))\n                                   & (penguins_df['island'].isin(island_input))\n                                   & (penguins_df['sex'].isin(sex_input))]\n        return filtered_data\n", "type": "text"}]